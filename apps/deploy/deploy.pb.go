// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.6
// source: mpaas/apps/deploy/pb/deploy.proto

package deploy

import (
	resource "github.com/infraboard/mcube/pb/resource"
	event "github.com/infraboard/mpaas/apps/event"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type STAGE int32

const (
	// 准备中
	STAGE_PENDDING STAGE = 0
	// 创建中, 创建时触发
	STAGE_CREATING STAGE = 1
	// 重启中, 版本和副本都没变化时触发
	STAGE_RESTARTING STAGE = 2
	// 版本升级中, 发布新版本时触发
	STAGE_UPGRADING STAGE = 3
	// 升级规模, 副本增加时触发
	STAGE_SCALE_UP STAGE = 4
	// 版本降级中, 回滚时触发
	STAGE_DOWNGRADING STAGE = 5
	// 降级规模, 副本缩减时触发
	STAGE_SCAL_DOWN STAGE = 6
	// 正常运行
	STAGE_ACTIVE STAGE = 8
	// 有风险,但是服务正常使用
	STAGE_WARNNING STAGE = 10
	// 异常运行
	STAGE_ERROR STAGE = 12
	// 已停止, 副本数调整为0时触发
	STAGE_STOPPED STAGE = 14
)

// Enum value maps for STAGE.
var (
	STAGE_name = map[int32]string{
		0:  "PENDDING",
		1:  "CREATING",
		2:  "RESTARTING",
		3:  "UPGRADING",
		4:  "SCALE_UP",
		5:  "DOWNGRADING",
		6:  "SCAL_DOWN",
		8:  "ACTIVE",
		10: "WARNNING",
		12: "ERROR",
		14: "STOPPED",
	}
	STAGE_value = map[string]int32{
		"PENDDING":    0,
		"CREATING":    1,
		"RESTARTING":  2,
		"UPGRADING":   3,
		"SCALE_UP":    4,
		"DOWNGRADING": 5,
		"SCAL_DOWN":   6,
		"ACTIVE":      8,
		"WARNNING":    10,
		"ERROR":       12,
		"STOPPED":     14,
	}
)

func (x STAGE) Enum() *STAGE {
	p := new(STAGE)
	*p = x
	return p
}

func (x STAGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (STAGE) Descriptor() protoreflect.EnumDescriptor {
	return file_mpaas_apps_deploy_pb_deploy_proto_enumTypes[0].Descriptor()
}

func (STAGE) Type() protoreflect.EnumType {
	return &file_mpaas_apps_deploy_pb_deploy_proto_enumTypes[0]
}

func (x STAGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use STAGE.Descriptor instead.
func (STAGE) EnumDescriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{0}
}

type TYPE int32

const (
	// 基于k8s部署
	TYPE_KUBERNETES TYPE = 0
	// 基于主机部署
	TYPE_HOST TYPE = 1
)

// Enum value maps for TYPE.
var (
	TYPE_name = map[int32]string{
		0: "KUBERNETES",
		1: "HOST",
	}
	TYPE_value = map[string]int32{
		"KUBERNETES": 0,
		"HOST":       1,
	}
)

func (x TYPE) Enum() *TYPE {
	p := new(TYPE)
	*p = x
	return p
}

func (x TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_mpaas_apps_deploy_pb_deploy_proto_enumTypes[1].Descriptor()
}

func (TYPE) Type() protoreflect.EnumType {
	return &file_mpaas_apps_deploy_pb_deploy_proto_enumTypes[1]
}

func (x TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TYPE.Descriptor instead.
func (TYPE) EnumDescriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{1}
}

type ACCESS_TYPE int32

const (
	// 以环境变量访问
	ACCESS_TYPE_ENV ACCESS_TYPE = 0
)

// Enum value maps for ACCESS_TYPE.
var (
	ACCESS_TYPE_name = map[int32]string{
		0: "ENV",
	}
	ACCESS_TYPE_value = map[string]int32{
		"ENV": 0,
	}
)

func (x ACCESS_TYPE) Enum() *ACCESS_TYPE {
	p := new(ACCESS_TYPE)
	*p = x
	return p
}

func (x ACCESS_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCESS_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_mpaas_apps_deploy_pb_deploy_proto_enumTypes[2].Descriptor()
}

func (ACCESS_TYPE) Type() protoreflect.EnumType {
	return &file_mpaas_apps_deploy_pb_deploy_proto_enumTypes[2]
}

func (x ACCESS_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCESS_TYPE.Descriptor instead.
func (ACCESS_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{2}
}

type DeploymentSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	// @gotags: bson:"total" json:"total"
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total" bson:"total"`
	// 清单
	// @gotags: bson:"items" json:"items"
	Items []*Deployment `protobuf:"bytes,2,rep,name=items,proto3" json:"items" bson:"items"`
}

func (x *DeploymentSet) Reset() {
	*x = DeploymentSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentSet) ProtoMessage() {}

func (x *DeploymentSet) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentSet.ProtoReflect.Descriptor instead.
func (*DeploymentSet) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{0}
}

func (x *DeploymentSet) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DeploymentSet) GetItems() []*Deployment {
	if x != nil {
		return x.Items
	}
	return nil
}

type Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 元信息
	// @gotags: bson:",inline" json:"meta"
	Meta *resource.Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta" bson:",inline"`
	// 创建信息
	// @gotags: bson:",inline" json:"spec"
	Spec *CreateDeploymentRequest `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec" bson:",inline"`
	// 部署访问凭证, 用于外部更新部署对象
	// @gotags: bson:"credential" json:"credential"
	Credential *Credential `protobuf:"bytes,4,opt,name=credential,proto3" json:"credential" bson:"credential"`
	// 部署状态
	// @gotags: bson:"status" json:"status"
	Status *Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status" bson:"status"`
	// 动态注入配置
	// @gotags: bson:"dynamic_injection" json:"dynamic_injection"
	DynamicInjection *DdynamicInjection `protobuf:"bytes,6,opt,name=dynamic_injection,json=dynamicInjection,proto3" json:"dynamic_injection" bson:"dynamic_injection"`
}

func (x *Deployment) Reset() {
	*x = Deployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment) ProtoMessage() {}

func (x *Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{1}
}

func (x *Deployment) GetMeta() *resource.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Deployment) GetSpec() *CreateDeploymentRequest {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Deployment) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *Deployment) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Deployment) GetDynamicInjection() *DdynamicInjection {
	if x != nil {
		return x.DynamicInjection
	}
	return nil
}

// 部署需要动态注入的信息
type DdynamicInjection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否注入系统信息, 比如服务名称, 部署名称等信息
	// @gotags: bson:"system_env" json:"system_env"
	SystemEnv bool `protobuf:"varint,1,opt,name=system_env,json=systemEnv,proto3" json:"system_env" bson:"system_env"`
	// 需要注入的环境变量
	// @gotags: bson:"env_groups" json:"env_groups"
	EnvGroups []*InjectionEnvGroup `protobuf:"bytes,2,rep,name=env_groups,json=envGroups,proto3" json:"env_groups" bson:"env_groups"`
}

func (x *DdynamicInjection) Reset() {
	*x = DdynamicInjection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DdynamicInjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdynamicInjection) ProtoMessage() {}

func (x *DdynamicInjection) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdynamicInjection.ProtoReflect.Descriptor instead.
func (*DdynamicInjection) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{2}
}

func (x *DdynamicInjection) GetSystemEnv() bool {
	if x != nil {
		return x.SystemEnv
	}
	return false
}

func (x *DdynamicInjection) GetEnvGroups() []*InjectionEnvGroup {
	if x != nil {
		return x.EnvGroups
	}
	return nil
}

type InjectionEnvGroupSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 需要注入的环境变量
	// @gotags: bson:"env_groups" json:"env_groups"
	EnvGroups []*InjectionEnvGroup `protobuf:"bytes,1,rep,name=env_groups,json=envGroups,proto3" json:"env_groups" bson:"env_groups"`
}

func (x *InjectionEnvGroupSet) Reset() {
	*x = InjectionEnvGroupSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InjectionEnvGroupSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InjectionEnvGroupSet) ProtoMessage() {}

func (x *InjectionEnvGroupSet) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InjectionEnvGroupSet.ProtoReflect.Descriptor instead.
func (*InjectionEnvGroupSet) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{3}
}

func (x *InjectionEnvGroupSet) GetEnvGroups() []*InjectionEnvGroup {
	if x != nil {
		return x.EnvGroups
	}
	return nil
}

type InjectionEnvGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 组名称或者描述
	// @gotags: bson:"name" json:"name"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" bson:"name"`
	// 开启动态注入, 默认开启
	// @gotags: bson:"enabled" json:"enabled"
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled" bson:"enabled"`
	// 匹配标签, 默认匹配所有
	// @gotags: bson:"match_label" json:"match_label"
	MatchLabel map[string]string `protobuf:"bytes,3,rep,name=match_label,json=matchLabel,proto3" json:"match_label" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"match_label"`
	// 注入相关状态
	// @gotags: bson:"status" json:"status"
	Status *InjectionEnvGroupStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status" bson:"status"`
	// 需要注入的环境变量
	// @gotags: bson:"inject_envs" json:"inject_envs"
	InjectEnvs []*InjectionEnv `protobuf:"bytes,4,rep,name=inject_envs,json=injectEnvs,proto3" json:"inject_envs" bson:"inject_envs"`
}

func (x *InjectionEnvGroup) Reset() {
	*x = InjectionEnvGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InjectionEnvGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InjectionEnvGroup) ProtoMessage() {}

func (x *InjectionEnvGroup) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InjectionEnvGroup.ProtoReflect.Descriptor instead.
func (*InjectionEnvGroup) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{4}
}

func (x *InjectionEnvGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InjectionEnvGroup) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *InjectionEnvGroup) GetMatchLabel() map[string]string {
	if x != nil {
		return x.MatchLabel
	}
	return nil
}

func (x *InjectionEnvGroup) GetStatus() *InjectionEnvGroupStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InjectionEnvGroup) GetInjectEnvs() []*InjectionEnv {
	if x != nil {
		return x.InjectEnvs
	}
	return nil
}

type InjectionEnvGroupStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 部署时 动态将需要注入的变量, 创建为一个configmap 关联给容器env配置
	// @gotags: bson:"ref_configmap" json:"ref_configmap"
	RefConfigmap string `protobuf:"bytes,1,opt,name=ref_configmap,json=refConfigmap,proto3" json:"ref_configmap" bson:"ref_configmap"`
	// 注册失败时的错误信息
	// @gotags: bson:"error_message" json:"error_message"
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message" bson:"error_message"`
}

func (x *InjectionEnvGroupStatus) Reset() {
	*x = InjectionEnvGroupStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InjectionEnvGroupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InjectionEnvGroupStatus) ProtoMessage() {}

func (x *InjectionEnvGroupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InjectionEnvGroupStatus.ProtoReflect.Descriptor instead.
func (*InjectionEnvGroupStatus) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{5}
}

func (x *InjectionEnvGroupStatus) GetRefConfigmap() string {
	if x != nil {
		return x.RefConfigmap
	}
	return ""
}

func (x *InjectionEnvGroupStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type InjectionEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key名称
	// @gotags: bson:"key" json:"key"
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key" bson:"key"`
	// 值
	// @gotags: bson:"value" json:"value"
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value" bson:"value"`
	// 该注入项描述信息
	// @gotags: bson:"desc" json:"desc"
	Desc string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc" bson:"desc"`
	// 是否加密注入
	// @gotags: bson:"encrypt" json:"encrypt"
	Encrypt bool `protobuf:"varint,3,opt,name=encrypt,proto3" json:"encrypt" bson:"encrypt"`
	// 如果加密失败, 补充失败原因
	// @gotags: bson:"encrypt_failed" json:"encrypt_failed"
	EncryptFailed string `protobuf:"bytes,4,opt,name=encrypt_failed,json=encryptFailed,proto3" json:"encrypt_failed" bson:"encrypt_failed"`
}

func (x *InjectionEnv) Reset() {
	*x = InjectionEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InjectionEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InjectionEnv) ProtoMessage() {}

func (x *InjectionEnv) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InjectionEnv.ProtoReflect.Descriptor instead.
func (*InjectionEnv) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{6}
}

func (x *InjectionEnv) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *InjectionEnv) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *InjectionEnv) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *InjectionEnv) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

func (x *InjectionEnv) GetEncryptFailed() string {
	if x != nil {
		return x.EncryptFailed
	}
	return ""
}

// 部署状态
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 部署阶段
	// @gotags: bson:"stage" json:"stage"
	Stage STAGE `protobuf:"varint,1,opt,name=stage,proto3,enum=infraboard.mpaas.deploy.STAGE" json:"stage" bson:"stage"`
	// 状态更新时间
	// @gotags: bson:"update_at" json:"update_at"
	UpdateAt int64 `protobuf:"varint,2,opt,name=update_at,json=updateAt,proto3" json:"update_at" bson:"update_at"`
	// 谁更新的
	// @gotags: bson:"update_by" json:"update_by"
	UpdateBy string `protobuf:"bytes,3,opt,name=update_by,json=updateBy,proto3" json:"update_by" bson:"update_by"`
	// 状态更新的原因
	// @gotags: bson:"reason" json:"reason"
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason" bson:"reason"`
	// 状态更新的具体信息
	// @gotags: bson:"message" json:"message"
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message" bson:"message"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{7}
}

func (x *Status) GetStage() STAGE {
	if x != nil {
		return x.Stage
	}
	return STAGE_PENDDING
}

func (x *Status) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *Status) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *Status) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 部署Token 用于访问集群配置
	// @gotags: json:"token"
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	// token上传刷新时间
	// @gotags: bson:"token_refresh_at" json:"token_refresh_at"
	TokenRefreshAt int64 `protobuf:"varint,2,opt,name=token_refresh_at,json=tokenRefreshAt,proto3" json:"token_refresh_at" bson:"token_refresh_at"`
	// token最近一次访问时间
	// @gotags: bson:"access_at" json:"access_at"
	AccessAt int64 `protobuf:"varint,3,opt,name=access_at,json=accessAt,proto3" json:"access_at" bson:"access_at"`
	// 访问次数
	// @gotags: bson:"access_count" json:"access_count"
	AccessCount int64 `protobuf:"varint,4,opt,name=access_count,json=accessCount,proto3" json:"access_count" bson:"access_count"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{8}
}

func (x *Credential) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Credential) GetTokenRefreshAt() int64 {
	if x != nil {
		return x.TokenRefreshAt
	}
	return 0
}

func (x *Credential) GetAccessAt() int64 {
	if x != nil {
		return x.AccessAt
	}
	return 0
}

func (x *Credential) GetAccessCount() int64 {
	if x != nil {
		return x.AccessCount
	}
	return 0
}

// K8sTypeConfig yaml文本格式的k8s部署相关配置文件
type K8STypeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 部署集群的名称
	// @gotags: bson:"cluster_id" json:"cluster_id" validate:"required"
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id" bson:"cluster_id" validate:"required"`
	// 负载类型
	// @gotags: bson:"workload_kind" json:"workload_kind"
	WorkloadKind string `protobuf:"bytes,2,opt,name=workload_kind,json=workloadKind,proto3" json:"workload_kind" bson:"workload_kind"`
	// k8s yaml配置, 支持deploy/statfulset/daemonset/job/cronjob
	// @gotags: bson:"workload_config" json:"workload_config" validate:"required"
	WorkloadConfig string `protobuf:"bytes,3,opt,name=workload_config,json=workloadConfig,proto3" json:"workload_config" bson:"workload_config" validate:"required"`
	// k8s service配置
	// @gotags: bson:"service" json:"service"
	Service string `protobuf:"bytes,4,opt,name=service,proto3" json:"service" bson:"service"`
	// k8s pods状态, 由Operater负责更新
	// @gotags: bson:"pods" json:"pods"
	Pods map[string]string `protobuf:"bytes,5,rep,name=pods,proto3" json:"pods" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"pods"`
}

func (x *K8STypeConfig) Reset() {
	*x = K8STypeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8STypeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8STypeConfig) ProtoMessage() {}

func (x *K8STypeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8STypeConfig.ProtoReflect.Descriptor instead.
func (*K8STypeConfig) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{9}
}

func (x *K8STypeConfig) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *K8STypeConfig) GetWorkloadKind() string {
	if x != nil {
		return x.WorkloadKind
	}
	return ""
}

func (x *K8STypeConfig) GetWorkloadConfig() string {
	if x != nil {
		return x.WorkloadConfig
	}
	return ""
}

func (x *K8STypeConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *K8STypeConfig) GetPods() map[string]string {
	if x != nil {
		return x.Pods
	}
	return nil
}

// HostTypeConfig 主机部署相关配置
type HostTypeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HostTypeConfig) Reset() {
	*x = HostTypeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostTypeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostTypeConfig) ProtoMessage() {}

func (x *HostTypeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostTypeConfig.ProtoReflect.Descriptor instead.
func (*HostTypeConfig) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{10}
}

type CreateDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 对象所在域
	// @gotags: bson:"domain" json:"domain"
	Domain string `protobuf:"bytes,19,opt,name=domain,proto3" json:"domain" bson:"domain"`
	// 对象所在空间
	// @gotags: bson:"namespace" json:"namespace"
	Namespace string `protobuf:"bytes,20,opt,name=namespace,proto3" json:"namespace" bson:"namespace"`
	// 集群事件通知
	// @gotags: bson:"event_notify" json:"event_notify"
	EventNotify *EventNotify `protobuf:"bytes,22,opt,name=event_notify,json=eventNotify,proto3" json:"event_notify" bson:"event_notify"`
	// 是否是模版
	// @gotags: bson:"is_template" json:"is_template"
	IsTemplate bool `protobuf:"varint,1,opt,name=is_template,json=isTemplate,proto3" json:"is_template" bson:"is_template"`
	// 服务Id
	// @gotags: bson:"service_id" json:"service_id"
	ServiceId string `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id" bson:"service_id"`
	// 服务名称
	// @gotags: bson:"service_name" json:"service_name"
	ServiceName string `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name" bson:"service_name"`
	// 服务版本, k8s部署时 通过yaml自动提取
	// @gotags: bson:"service_version" json:"service_version"
	ServiceVersion string `protobuf:"bytes,5,opt,name=service_version,json=serviceVersion,proto3" json:"service_version" bson:"service_version"`
	// 部署资源提供方
	// @gotags: bson:"provider" json:"provider" validate:"required"
	Provider string `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider" bson:"provider" validate:"required"`
	// 部署地域
	// @gotags: bson:"region" json:"region" validate:"required"
	Region string `protobuf:"bytes,8,opt,name=region,proto3" json:"region" bson:"region" validate:"required"`
	// 部署环境
	// @gotags: bson:"environment" json:"environment" validate:"required"
	Environment string `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment" bson:"environment" validate:"required"`
	// 部署所属集群
	// @gotags: bson:"cluster" json:"cluster" validate:"required"
	Cluster string `protobuf:"bytes,23,opt,name=cluster,proto3" json:"cluster" bson:"cluster" validate:"required"`
	// 服务部署所属分组
	// @gotags: bson:"group" json:"group" validate:"required"
	Group string `protobuf:"bytes,21,opt,name=group,proto3" json:"group" bson:"group" validate:"required"`
	// 部署方式
	// @gotags: bson:"type" json:"type"
	Type TYPE `protobuf:"varint,9,opt,name=type,proto3,enum=infraboard.mpaas.deploy.TYPE" json:"type" bson:"type"`
	// 集群的配置是否需要认证才能访问, 开启后会生成一个Token
	// @gotags: bson:"auth_enabled" json:"auth_enabled"
	AuthEnabled bool `protobuf:"varint,10,opt,name=auth_enabled,json=authEnabled,proto3" json:"auth_enabled" bson:"auth_enabled"`
	// k8s模式下的部署配置
	// @gotags: json:"k8s_type_config" bson:"k8s_type_config"
	K8STypeConfig *K8STypeConfig `protobuf:"bytes,11,opt,name=k8s_type_config,json=k8sTypeConfig,proto3" json:"k8s_type_config" bson:"k8s_type_config"`
	// 主机部署相关配置
	// @gotags: json:"host_type_config" bson:"host_type_config"
	HostTypeConfig *HostTypeConfig `protobuf:"bytes,12,opt,name=host_type_config,json=hostTypeConfig,proto3" json:"host_type_config" bson:"host_type_config"`
	// 部署描述信息
	// @gotags: bson:"describe" json:"describe"
	Describe string `protobuf:"bytes,13,opt,name=describe,proto3" json:"describe" bson:"describe"`
	// 部署名称, 默认使用 Deployment部署Yaml的名称
	// @gotags: bson:"name" json:"name"
	Name string `protobuf:"bytes,14,opt,name=name,proto3" json:"name" bson:"name"`
	// 是否需要发布申请, 需要发布申请的部署 不允许执行自动部署
	// @gotags: bson:"is_approval" json:"is_approval"
	IsApproval bool `protobuf:"varint,15,opt,name=is_approval,json=isApproval,proto3" json:"is_approval" bson:"is_approval"`
	// 服务访问地址相关信息
	// @gotags: bson:"access_info" json:"access_info"
	AccessInfo *AccessInfo `protobuf:"bytes,16,opt,name=access_info,json=accessInfo,proto3" json:"access_info" bson:"access_info"`
	// 部署标签
	// @gotags: bson:"labels" json:"labels"
	Labels map[string]string `protobuf:"bytes,25,rep,name=labels,proto3" json:"labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"labels"`
}

func (x *CreateDeploymentRequest) Reset() {
	*x = CreateDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentRequest) ProtoMessage() {}

func (x *CreateDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentRequest.ProtoReflect.Descriptor instead.
func (*CreateDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{11}
}

func (x *CreateDeploymentRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateDeploymentRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateDeploymentRequest) GetEventNotify() *EventNotify {
	if x != nil {
		return x.EventNotify
	}
	return nil
}

func (x *CreateDeploymentRequest) GetIsTemplate() bool {
	if x != nil {
		return x.IsTemplate
	}
	return false
}

func (x *CreateDeploymentRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *CreateDeploymentRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CreateDeploymentRequest) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

func (x *CreateDeploymentRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CreateDeploymentRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateDeploymentRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *CreateDeploymentRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *CreateDeploymentRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *CreateDeploymentRequest) GetType() TYPE {
	if x != nil {
		return x.Type
	}
	return TYPE_KUBERNETES
}

func (x *CreateDeploymentRequest) GetAuthEnabled() bool {
	if x != nil {
		return x.AuthEnabled
	}
	return false
}

func (x *CreateDeploymentRequest) GetK8STypeConfig() *K8STypeConfig {
	if x != nil {
		return x.K8STypeConfig
	}
	return nil
}

func (x *CreateDeploymentRequest) GetHostTypeConfig() *HostTypeConfig {
	if x != nil {
		return x.HostTypeConfig
	}
	return nil
}

func (x *CreateDeploymentRequest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *CreateDeploymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDeploymentRequest) GetIsApproval() bool {
	if x != nil {
		return x.IsApproval
	}
	return false
}

func (x *CreateDeploymentRequest) GetAccessInfo() *AccessInfo {
	if x != nil {
		return x.AccessInfo
	}
	return nil
}

func (x *CreateDeploymentRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type EventNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否开启集群事件通知
	// @gotags: bson:"enabled" json:"enabled"
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled" bson:"enabled"`
	// 需要通知的事件等级
	// @gotags: bson:"level" json:"level"
	Level event.LEVEL `protobuf:"varint,2,opt,name=level,proto3,enum=infraboard.mpaas.event.LEVEL" json:"level" bson:"level"`
	// 部署有异常事件时需要被通知的人
	// @gotags: bson:"users" json:"users"
	Users []string `protobuf:"bytes,3,rep,name=users,proto3" json:"users" bson:"users"`
}

func (x *EventNotify) Reset() {
	*x = EventNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNotify) ProtoMessage() {}

func (x *EventNotify) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNotify.ProtoReflect.Descriptor instead.
func (*EventNotify) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{12}
}

func (x *EventNotify) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *EventNotify) GetLevel() event.LEVEL {
	if x != nil {
		return x.Level
	}
	return event.LEVEL(0)
}

func (x *EventNotify) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

type AccessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 内部访问地址
	// @gotags: bson:"private" json:"private"
	Private *AccessAddress `protobuf:"bytes,1,opt,name=private,proto3" json:"private" bson:"private"`
	// 是否注册到网关
	// @gotags: bson:"registe_gateway" json:"registe_gateway"
	RegisteGateway bool `protobuf:"varint,2,opt,name=registe_gateway,json=registeGateway,proto3" json:"registe_gateway" bson:"registe_gateway"`
	// 网关Id
	// @gotags: bson:"gateway_id" json:"gateway_id"
	GatewayId string `protobuf:"bytes,3,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id" bson:"gateway_id"`
	// 外部访问地址
	// @gotags: bson:"public" json:"public"
	Public *AccessAddress `protobuf:"bytes,4,opt,name=public,proto3" json:"public" bson:"public"`
}

func (x *AccessInfo) Reset() {
	*x = AccessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessInfo) ProtoMessage() {}

func (x *AccessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessInfo.ProtoReflect.Descriptor instead.
func (*AccessInfo) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{13}
}

func (x *AccessInfo) GetPrivate() *AccessAddress {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *AccessInfo) GetRegisteGateway() bool {
	if x != nil {
		return x.RegisteGateway
	}
	return false
}

func (x *AccessInfo) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *AccessInfo) GetPublic() *AccessAddress {
	if x != nil {
		return x.Public
	}
	return nil
}

// 部署的访问方式
type AccessAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 访问的方式
	// @gotags: bson:"type" json:"type"
	Type ACCESS_TYPE `protobuf:"varint,1,opt,name=type,proto3,enum=infraboard.mpaas.deploy.ACCESS_TYPE" json:"type" bson:"type"`
	// 访问地址
	// @gotags: bson:"access_envs" json:"access_envs"
	AccessEnvs []*AccessEnv `protobuf:"bytes,2,rep,name=access_envs,json=accessEnvs,proto3" json:"access_envs" bson:"access_envs"`
}

func (x *AccessAddress) Reset() {
	*x = AccessAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessAddress) ProtoMessage() {}

func (x *AccessAddress) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessAddress.ProtoReflect.Descriptor instead.
func (*AccessAddress) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{14}
}

func (x *AccessAddress) GetType() ACCESS_TYPE {
	if x != nil {
		return x.Type
	}
	return ACCESS_TYPE_ENV
}

func (x *AccessAddress) GetAccessEnvs() []*AccessEnv {
	if x != nil {
		return x.AccessEnvs
	}
	return nil
}

// kubelet 为 Pod 添加环境变量 {SVCNAME}_SERVICE_HOST 和 {SVCNAME}_SERVICE_PORT。
// 这里 Service 的名称需大写，横线被转换成下划线。
// 具体请参考: https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#environment-variables
type AccessEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 服务访问地址变量的名称
	// @gotags: bson:"name" json:"name"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" bson:"name"`
	// 样例
	// @gotags: bson:"example" json:"example"
	Example string `protobuf:"bytes,2,opt,name=example,proto3" json:"example" bson:"example"`
}

func (x *AccessEnv) Reset() {
	*x = AccessEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEnv) ProtoMessage() {}

func (x *AccessEnv) ProtoReflect() protoreflect.Message {
	mi := &file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEnv.ProtoReflect.Descriptor instead.
func (*AccessEnv) Descriptor() ([]byte, []int) {
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP(), []int{15}
}

func (x *AccessEnv) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessEnv) GetExample() string {
	if x != nil {
		return x.Example
	}
	return ""
}

var File_mpaas_apps_deploy_pb_deploy_proto protoreflect.FileDescriptor

var file_mpaas_apps_deploy_pb_deploy_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2f, 0x70, 0x62, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x1a, 0x1c, 0x6d, 0x63,
	0x75, 0x62, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x70, 0x61, 0x61,
	0x73, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x62, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60, 0x0a, 0x0d, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d,
	0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xde, 0x02,
	0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61,
	0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70,
	0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x44, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d,
	0x0a, 0x11, 0x44, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x6e,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45,
	0x6e, 0x76, 0x12, 0x49, 0x0a, 0x0a, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x09, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x61, 0x0a,
	0x14, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x22, 0xef, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d,
	0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x49, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x69,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70,
	0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x49, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x52, 0x0a, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x6e, 0x76, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x63, 0x0a, 0x17, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d,
	0x61, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61,
	0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x53, 0x54, 0x41, 0x47, 0x45, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x95, 0x02, 0x0a, 0x0d, 0x4b, 0x38, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x70, 0x6f,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x4b, 0x38, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x50, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x10, 0x0a, 0x0e, 0x48, 0x6f, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xcb, 0x07, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x47, 0x0a,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4e,
	0x0a, 0x0f, 0x6b, 0x38, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x4b, 0x38, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0d, 0x6b, 0x38, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51,
	0x0a, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a, 0x0b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d,
	0x70, 0x61, 0x61, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xd6, 0x01,
	0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x8e, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x76,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x70, 0x61, 0x61, 0x73, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x76, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x76, 0x73, 0x22, 0x39, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x45, 0x6e, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2a, 0xa2, 0x01, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x47, 0x45, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x45, 0x4e, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x50, 0x47, 0x52,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x43, 0x41, 0x4c, 0x45,
	0x5f, 0x55, 0x50, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x57, 0x4e, 0x47, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x41, 0x4c, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x08, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41, 0x52, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x0e, 0x2a, 0x20, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x0e, 0x0a, 0x0a, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x16, 0x0a, 0x0b, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x56, 0x10,
	0x00, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x6d, 0x70, 0x61, 0x61, 0x73,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mpaas_apps_deploy_pb_deploy_proto_rawDescOnce sync.Once
	file_mpaas_apps_deploy_pb_deploy_proto_rawDescData = file_mpaas_apps_deploy_pb_deploy_proto_rawDesc
)

func file_mpaas_apps_deploy_pb_deploy_proto_rawDescGZIP() []byte {
	file_mpaas_apps_deploy_pb_deploy_proto_rawDescOnce.Do(func() {
		file_mpaas_apps_deploy_pb_deploy_proto_rawDescData = protoimpl.X.CompressGZIP(file_mpaas_apps_deploy_pb_deploy_proto_rawDescData)
	})
	return file_mpaas_apps_deploy_pb_deploy_proto_rawDescData
}

var file_mpaas_apps_deploy_pb_deploy_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_mpaas_apps_deploy_pb_deploy_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_mpaas_apps_deploy_pb_deploy_proto_goTypes = []interface{}{
	(STAGE)(0),                      // 0: infraboard.mpaas.deploy.STAGE
	(TYPE)(0),                       // 1: infraboard.mpaas.deploy.TYPE
	(ACCESS_TYPE)(0),                // 2: infraboard.mpaas.deploy.ACCESS_TYPE
	(*DeploymentSet)(nil),           // 3: infraboard.mpaas.deploy.DeploymentSet
	(*Deployment)(nil),              // 4: infraboard.mpaas.deploy.Deployment
	(*DdynamicInjection)(nil),       // 5: infraboard.mpaas.deploy.DdynamicInjection
	(*InjectionEnvGroupSet)(nil),    // 6: infraboard.mpaas.deploy.InjectionEnvGroupSet
	(*InjectionEnvGroup)(nil),       // 7: infraboard.mpaas.deploy.InjectionEnvGroup
	(*InjectionEnvGroupStatus)(nil), // 8: infraboard.mpaas.deploy.InjectionEnvGroupStatus
	(*InjectionEnv)(nil),            // 9: infraboard.mpaas.deploy.InjectionEnv
	(*Status)(nil),                  // 10: infraboard.mpaas.deploy.Status
	(*Credential)(nil),              // 11: infraboard.mpaas.deploy.Credential
	(*K8STypeConfig)(nil),           // 12: infraboard.mpaas.deploy.K8sTypeConfig
	(*HostTypeConfig)(nil),          // 13: infraboard.mpaas.deploy.HostTypeConfig
	(*CreateDeploymentRequest)(nil), // 14: infraboard.mpaas.deploy.CreateDeploymentRequest
	(*EventNotify)(nil),             // 15: infraboard.mpaas.deploy.EventNotify
	(*AccessInfo)(nil),              // 16: infraboard.mpaas.deploy.AccessInfo
	(*AccessAddress)(nil),           // 17: infraboard.mpaas.deploy.AccessAddress
	(*AccessEnv)(nil),               // 18: infraboard.mpaas.deploy.AccessEnv
	nil,                             // 19: infraboard.mpaas.deploy.InjectionEnvGroup.MatchLabelEntry
	nil,                             // 20: infraboard.mpaas.deploy.K8sTypeConfig.PodsEntry
	nil,                             // 21: infraboard.mpaas.deploy.CreateDeploymentRequest.LabelsEntry
	(*resource.Meta)(nil),           // 22: infraboard.mcube.resource.Meta
	(event.LEVEL)(0),                // 23: infraboard.mpaas.event.LEVEL
}
var file_mpaas_apps_deploy_pb_deploy_proto_depIdxs = []int32{
	4,  // 0: infraboard.mpaas.deploy.DeploymentSet.items:type_name -> infraboard.mpaas.deploy.Deployment
	22, // 1: infraboard.mpaas.deploy.Deployment.meta:type_name -> infraboard.mcube.resource.Meta
	14, // 2: infraboard.mpaas.deploy.Deployment.spec:type_name -> infraboard.mpaas.deploy.CreateDeploymentRequest
	11, // 3: infraboard.mpaas.deploy.Deployment.credential:type_name -> infraboard.mpaas.deploy.Credential
	10, // 4: infraboard.mpaas.deploy.Deployment.status:type_name -> infraboard.mpaas.deploy.Status
	5,  // 5: infraboard.mpaas.deploy.Deployment.dynamic_injection:type_name -> infraboard.mpaas.deploy.DdynamicInjection
	7,  // 6: infraboard.mpaas.deploy.DdynamicInjection.env_groups:type_name -> infraboard.mpaas.deploy.InjectionEnvGroup
	7,  // 7: infraboard.mpaas.deploy.InjectionEnvGroupSet.env_groups:type_name -> infraboard.mpaas.deploy.InjectionEnvGroup
	19, // 8: infraboard.mpaas.deploy.InjectionEnvGroup.match_label:type_name -> infraboard.mpaas.deploy.InjectionEnvGroup.MatchLabelEntry
	8,  // 9: infraboard.mpaas.deploy.InjectionEnvGroup.status:type_name -> infraboard.mpaas.deploy.InjectionEnvGroupStatus
	9,  // 10: infraboard.mpaas.deploy.InjectionEnvGroup.inject_envs:type_name -> infraboard.mpaas.deploy.InjectionEnv
	0,  // 11: infraboard.mpaas.deploy.Status.stage:type_name -> infraboard.mpaas.deploy.STAGE
	20, // 12: infraboard.mpaas.deploy.K8sTypeConfig.pods:type_name -> infraboard.mpaas.deploy.K8sTypeConfig.PodsEntry
	15, // 13: infraboard.mpaas.deploy.CreateDeploymentRequest.event_notify:type_name -> infraboard.mpaas.deploy.EventNotify
	1,  // 14: infraboard.mpaas.deploy.CreateDeploymentRequest.type:type_name -> infraboard.mpaas.deploy.TYPE
	12, // 15: infraboard.mpaas.deploy.CreateDeploymentRequest.k8s_type_config:type_name -> infraboard.mpaas.deploy.K8sTypeConfig
	13, // 16: infraboard.mpaas.deploy.CreateDeploymentRequest.host_type_config:type_name -> infraboard.mpaas.deploy.HostTypeConfig
	16, // 17: infraboard.mpaas.deploy.CreateDeploymentRequest.access_info:type_name -> infraboard.mpaas.deploy.AccessInfo
	21, // 18: infraboard.mpaas.deploy.CreateDeploymentRequest.labels:type_name -> infraboard.mpaas.deploy.CreateDeploymentRequest.LabelsEntry
	23, // 19: infraboard.mpaas.deploy.EventNotify.level:type_name -> infraboard.mpaas.event.LEVEL
	17, // 20: infraboard.mpaas.deploy.AccessInfo.private:type_name -> infraboard.mpaas.deploy.AccessAddress
	17, // 21: infraboard.mpaas.deploy.AccessInfo.public:type_name -> infraboard.mpaas.deploy.AccessAddress
	2,  // 22: infraboard.mpaas.deploy.AccessAddress.type:type_name -> infraboard.mpaas.deploy.ACCESS_TYPE
	18, // 23: infraboard.mpaas.deploy.AccessAddress.access_envs:type_name -> infraboard.mpaas.deploy.AccessEnv
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_mpaas_apps_deploy_pb_deploy_proto_init() }
func file_mpaas_apps_deploy_pb_deploy_proto_init() {
	if File_mpaas_apps_deploy_pb_deploy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DdynamicInjection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InjectionEnvGroupSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InjectionEnvGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InjectionEnvGroupStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InjectionEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8STypeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostTypeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpaas_apps_deploy_pb_deploy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mpaas_apps_deploy_pb_deploy_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mpaas_apps_deploy_pb_deploy_proto_goTypes,
		DependencyIndexes: file_mpaas_apps_deploy_pb_deploy_proto_depIdxs,
		EnumInfos:         file_mpaas_apps_deploy_pb_deploy_proto_enumTypes,
		MessageInfos:      file_mpaas_apps_deploy_pb_deploy_proto_msgTypes,
	}.Build()
	File_mpaas_apps_deploy_pb_deploy_proto = out.File
	file_mpaas_apps_deploy_pb_deploy_proto_rawDesc = nil
	file_mpaas_apps_deploy_pb_deploy_proto_goTypes = nil
	file_mpaas_apps_deploy_pb_deploy_proto_depIdxs = nil
}
