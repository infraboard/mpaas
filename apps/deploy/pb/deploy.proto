syntax = "proto3";

package infraboard.mpaas.deploy;
option go_package = "github.com/infraboard/mpaas/apps/deploy";

import "mcube/pb/resource/meta.proto";
import "mpaas/apps/event/pb/event.proto";

message DeploymentSet {
    // 总数
    // @gotags: bson:"total" json:"total"
    int64 total = 1;
    // 清单
    // @gotags: bson:"items" json:"items"
    repeated Deployment items = 2;
}

message Deployment  {
    // 元信息
    // @gotags: bson:",inline" json:"meta"
    infraboard.mcube.resource.Meta meta = 1;
    // 创建信息
    // @gotags: bson:",inline" json:"spec"
    CreateDeploymentRequest spec = 3;
    // 部署访问凭证, 用于外部更新部署对象
    // @gotags: bson:"credential" json:"credential"
    Credential credential = 4;
    // 部署状态
    // @gotags: bson:"status" json:"status"
    Status status = 5;
    // 动态注入配置
    // @gotags: bson:"dynamic_injection" json:"dynamic_injection"
    DdynamicInjection dynamic_injection = 6;
}

// 部署需要动态注入的信息
message DdynamicInjection {
    // 是否注入系统信息, 比如服务名称, 部署名称等信息
    // @gotags: bson:"system_env" json:"system_env"
    bool system_env = 1;
    // 需要注入的环境变量
    // @gotags: bson:"env_groups" json:"env_groups"
    repeated InjectionEnvGroup env_groups = 2;
}

message InjectionEnvGroupSet {
    // 需要注入的环境变量
    // @gotags: bson:"env_groups" json:"env_groups"
    repeated InjectionEnvGroup env_groups = 1;
}

message InjectionEnvGroup {
    // 组名称或者描述
    // @gotags: bson:"name" json:"name"
    string name = 1;
    // 开启动态注入, 默认开启
    // @gotags: bson:"enabled" json:"enabled"
    bool enabled = 2;
    // 匹配标签, 默认匹配所有
    // @gotags: bson:"match_label" json:"match_label"
    map<string,string> match_label = 3;
    // 注入相关状态
    // @gotags: bson:"status" json:"status"
    InjectionEnvGroupStatus status = 5;
    // 需要注入的环境变量
    // @gotags: bson:"inject_envs" json:"inject_envs"
    repeated InjectionEnv inject_envs = 4;
}

message InjectionEnvGroupStatus {
    // 部署时 动态将需要注入的变量, 创建为一个configmap 关联给容器env配置
    // @gotags: bson:"ref_configmap" json:"ref_configmap"
    string ref_configmap = 1;
    // 注册失败时的错误信息
    // @gotags: bson:"error_message" json:"error_message"
    string error_message = 2;
}

message InjectionEnv {
    // key名称
    // @gotags: bson:"key" json:"key"
    string key = 1;
    // 值
    // @gotags: bson:"value" json:"value"
    string value = 2;
    // 该注入项描述信息
    // @gotags: bson:"desc" json:"desc"
    string desc = 5;
    // 是否加密注入
    // @gotags: bson:"encrypt" json:"encrypt"
    bool encrypt = 3;
    // 如果加密失败, 补充失败原因
    // @gotags: bson:"encrypt_failed" json:"encrypt_failed"
    string encrypt_failed = 4;
}

enum STAGE {
    // 准备中
    PENDDING = 0;
    // 创建中, 创建时触发
    CREATING = 1;
    // 重启中, 版本和副本都没变化时触发
    RESTARTING = 2;
    // 版本升级中, 发布新版本时触发
    UPGRADING = 3;
    // 升级规模, 副本增加时触发
    SCALE_UP = 4;
    // 版本降级中, 回滚时触发
    DOWNGRADING = 5;
    // 降级规模, 副本缩减时触发
    SCAL_DOWN = 6;

    // 正常运行
    ACTIVE = 8;
    // 有风险,但是服务正常使用
    WARNNING = 10;
    // 异常运行
    ERROR = 12;

    // 已停止, 副本数调整为0时触发
    STOPPED = 14;
}

// 部署状态
message Status {
    // 部署阶段
    // @gotags: bson:"stage" json:"stage"
    STAGE stage = 1;
    // 状态更新时间
    // @gotags: bson:"update_at" json:"update_at"
    int64 update_at = 2;
    // 谁更新的
    // @gotags: bson:"update_by" json:"update_by"
    string update_by = 3;
    // 状态更新的原因
    // @gotags: bson:"reason" json:"reason"
    string reason = 4;
    // 状态更新的具体信息
    // @gotags: bson:"message" json:"message"
    string message = 5;
}

message Credential {
    // 部署Token 用于访问集群配置
    // @gotags: json:"token"
    string token = 1;
    // token上传刷新时间
    // @gotags: bson:"token_refresh_at" json:"token_refresh_at"
    int64 token_refresh_at = 2;
    // token最近一次访问时间
    // @gotags: bson:"access_at" json:"access_at"
    int64 access_at = 3;
    // 访问次数
    // @gotags: bson:"access_count" json:"access_count"
    int64 access_count = 4;
}

enum TYPE {
    // 基于k8s部署
    KUBERNETES = 0;
    // 基于主机部署
    HOST = 1;
}

// K8sTypeConfig yaml文本格式的k8s部署相关配置文件
message K8sTypeConfig {
    // 部署集群的名称
    // @gotags: bson:"cluster_id" json:"cluster_id" validate:"required"
    string cluster_id = 1;
    // 负载类型
    // @gotags: bson:"workload_kind" json:"workload_kind"
    string workload_kind = 2;
    // k8s yaml配置, 支持deploy/statfulset/daemonset/job/cronjob
    // @gotags: bson:"workload_config" json:"workload_config" validate:"required"
    string workload_config = 3;
    // k8s service配置
    // @gotags: bson:"service" json:"service"
    string service = 4;
    // k8s pods状态, 由Operater负责更新
    // @gotags: bson:"pods" json:"pods"
    map<string,string> pods = 5;
}

// HostTypeConfig 主机部署相关配置
message HostTypeConfig {

}

enum KIND {
    // 应用工作负载, 需要关联应用
    WORKLOAD = 0;
    // 应用中间件, 无需关联应用, 直接部署
    MIDDLEWARE = 1;
}

message CreateDeploymentRequest {
	// 部署的类型
	// @gotags: bson:"kind" json:"kind"
    KIND kind = 18;
    // 对象所在域
    // @gotags: bson:"domain" json:"domain"
    string domain = 19;
    // 对象所在空间
    // @gotags: bson:"namespace" json:"namespace"
    string namespace = 20;
    // 集群事件通知
    // @gotags: bson:"event_notify" json:"event_notify"
    EventNotify event_notify = 22;
	// 是否是模版
	// @gotags: bson:"is_template" json:"is_template"
    bool is_template = 1;
    // 服务Id
    // @gotags: bson:"service_id" json:"service_id"
    string service_id = 3;
    // 服务名称
    // @gotags: bson:"service_name" json:"service_name"
    string service_name = 4;
    // 服务版本, k8s部署时 通过yaml自动提取
    // @gotags: bson:"service_version" json:"service_version"
    string service_version = 5;
    // 部署资源提供方
    // @gotags: bson:"provider" json:"provider" validate:"required"
    string provider = 7;
    // 部署地域
    // @gotags: bson:"region" json:"region" validate:"required"
    string region = 8;
    // 部署环境
    // @gotags: bson:"environment" json:"environment" validate:"required"
    string environment = 6;
    // 部署所属集群
    // @gotags: bson:"cluster" json:"cluster" validate:"required"
    string cluster = 23;
    // 服务部署所属分组
    // @gotags: bson:"group" json:"group" validate:"required"
    string group = 21;
    // 部署方式
    // @gotags: bson:"type" json:"type"
    TYPE type = 9;
    // 集群的配置是否需要认证才能访问, 开启后会生成一个Token
    // @gotags: bson:"auth_enabled" json:"auth_enabled"
    bool auth_enabled = 10;
    // k8s模式下的部署配置
    // @gotags: json:"k8s_type_config" bson:"k8s_type_config"
    K8sTypeConfig k8s_type_config = 11;
    // 主机部署相关配置
    // @gotags: json:"host_type_config" bson:"host_type_config"
    HostTypeConfig host_type_config = 12;
    // 部署描述信息
    // @gotags: bson:"describe" json:"describe"
    string describe = 13;
    // 部署名称, 默认使用 Deployment部署Yaml的名称
    // @gotags: bson:"name" json:"name"
    string name = 14;
    // 是否需要发布申请, 需要发布申请的部署 不允许执行自动部署
    // @gotags: bson:"is_approval" json:"is_approval"
    bool is_approval = 15;
    // 服务访问地址相关信息
    // @gotags: bson:"access_info" json:"access_info"
    AccessInfo access_info = 16;
    // 部署标签
    // @gotags: bson:"labels" json:"labels"
    map<string,string> labels = 25;
}

message EventNotify {
    // 是否开启集群事件通知
    // @gotags: bson:"enabled" json:"enabled"
    bool enabled = 1;
    // 需要通知的事件等级
    // @gotags: bson:"level" json:"level"
    event.LEVEL level = 2;
    // 部署有异常事件时需要被通知的人
    // @gotags: bson:"users" json:"users"
    repeated string users = 3;
}

message AccessInfo {
    // 内部访问地址
    // @gotags: bson:"private" json:"private"
    AccessAddress private = 1;
    // 是否注册到网关
    // @gotags: bson:"registe_gateway" json:"registe_gateway"
    bool registe_gateway = 2;
    // 网关Id
    // @gotags: bson:"gateway_id" json:"gateway_id"
    string gateway_id = 3;
    // 外部访问地址
    // @gotags: bson:"public" json:"public"
    AccessAddress public = 4;
}

enum ACCESS_TYPE {
    // 以环境变量访问
    ENV = 0;
}

// 部署的访问方式
message AccessAddress {
    // 访问的方式
    // @gotags: bson:"type" json:"type"
    ACCESS_TYPE type = 1;
    // 访问地址
    // @gotags: bson:"access_envs" json:"access_envs"
    repeated AccessEnv access_envs = 2;
}

// kubelet 为 Pod 添加环境变量 {SVCNAME}_SERVICE_HOST 和 {SVCNAME}_SERVICE_PORT。 
// 这里 Service 的名称需大写，横线被转换成下划线。
// 具体请参考: https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#environment-variables
message AccessEnv {
    // 服务访问地址变量的名称
    // @gotags: bson:"name" json:"name"
    string name = 1;
    // 样例
    // @gotags: bson:"example" json:"example"
    string example = 2;
}