syntax = "proto3";

package infraboard.mpaas.cluster;
option go_package = "github.com/infraboard/mpaas/apps/cluster";

import "mcube/pb/resource/meta.proto";
import "mpaas/apps/deploy/pb/deploy.proto";
import "mcenter/apps/service/pb/service.proto";

message ClusterSet {
    // 总数
    // @gotags: json:"total"
    int64 total = 1;
    // 清单
    // @gotags: json:"items"
    repeated Cluster items = 2;
}

// 部署集群
message Cluster  {
    // 元信息
    // @gotags: bson:",inline" json:"meta"
    infraboard.mcube.resource.Meta meta = 1;
    // 元信息
    // @gotags: bson:",inline" json:"scope"
    infraboard.mcube.resource.Scope scope = 2;
    // 创建信息
    // @gotags: bson:",inline" json:"spec"
    CreateClusterRequest spec = 3;
    // 关联的部署
    // @gotags: bson:"-" json:"deployments"
    deploy.DeploymentSet deployments = 4;
    // 关联的部署
    // @gotags: bson:"-" json:"service"
    mcenter.service.Service service = 5;
}

enum KIND {
    // 应用工作负载, 需要关联应用
    WORKLOAD = 0;
    // 应用中间件, 无需关联应用, 直接部署
    MIDDLEWARE = 1;
}

message CreateClusterRequest {
	// 部署的类型
	// @gotags: bson:"kind" json:"kind"
    KIND kind = 1;
    // 服务Id
    // @gotags: bson:"service_id" json:"service_id"
    string service_id = 2;
    // 集群名称
    // @gotags: bson:"name" json:"name" validate:"required"
    string name = 3;
    // 集群描述
    // @gotags: bson:"describe" json:"describe"
    string describe = 4;
    // 集群访问方式
    // @gotags: bson:"access_config" json:"access_config"
    AccessConfig access_config = 5;
    // 扩展属性
    // @gotags: bson:"extra" json:"extra"
    map<string,string> extra = 14;
    // 部署标签
    // @gotags: bson:"labels" json:"labels"
    map<string,string> labels = 15;
}

message AccessConfig {
    // 集群内部访问地址
    // @gotags: bson:"private" json:"private"
    PrivateAccess private = 1;
    // 集群外部访问地址
    // @gotags: bson:"public" json:"public"
    PublicAccess public = 2;
}

enum INTERNAL_ACCESS_PROVIDER {
    K8S_SERVICE = 0;
}

//  内网访问
message PrivateAccess {
    // 访问地址
    // @gotags: bson:"address" json:"address"
    string address = 1;
    // 采用那种方式对内访问
    // @gotags: bson:"provider" json:"provider"
    INTERNAL_ACCESS_PROVIDER provider = 2;
    // k8s 集群信息
    // @gotags: bson:"k8s_cluster" json:"k8s_cluster"
    string k8s_cluster = 3;
    // k8s service 配置
    // @gotags: bson:"k8s_service" json:"k8s_service"
    string k8s_service = 4;
    // 访问地址
    // @gotags: bson:"access_envs" json:"access_envs"
    repeated AccessEnv access_envs = 15;
}

// kubelet 为 Pod 添加环境变量 {SVCNAME}_SERVICE_HOST 和 {SVCNAME}_SERVICE_PORT。 
// 这里 Service 的名称需大写，横线被转换成下划线。
// 具体请参考: https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#environment-variables
message AccessEnv {
    // 服务访问地址变量的名称
    // @gotags: bson:"name" json:"name"
    string name = 1;
    // 样例
    // @gotags: bson:"example" json:"example"
    string example = 2;
}

enum PUBLIC_ACCESS_PROVIDER {
    K8S_INGRESS = 0;
}

// 外网访问
message PublicAccess {
    // 访问地址
    // @gotags: bson:"address" json:"address"
    string address = 1;
    // 采用那种方式对外访问
    // @gotags: bson:"provider" json:"provider"
    PUBLIC_ACCESS_PROVIDER provider = 2;
    // k8s ingress 配置
    // @gotags: bson:"k8s_ingress" json:"k8s_ingress"
    string k8s_ingress = 3;
}